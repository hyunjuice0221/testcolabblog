{
  
    
        "post0": {
            "title": "제목!!",
            "content": "x = 3 y = 7 x + y . 10 . # ctrl + Enter : 실행만함! . hello world . hello world . hello world . hello world | hello world | . hello world | hello world | &#48320;&#49688; . a = 10 #int(인트,인티저), 정수형 b = &#39;10&#39; #string(스트링), 문자열 c = &#39;lee&#39; d = &#39;hojun&#39; e = True #bool(부울,불리언), 논리형 f = 10.1 #float(플랏), 실수형 g = [1,2,3,4,5] #list(리스트) h = (1,2,3,4,5) #tuple(튜플) i = {1,2,3,4,5} #set(셋), 집합 j = {&#39;하나&#39;:&#39;one&#39;,&#39;둘&#39;:&#39;two&#39;} #dict(딕셔너리) . type(a) . int . a + a . 20 . b + b . &#39;1010&#39; . dir(a) . [&#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__bool__&#39;, &#39;__ceil__&#39;, &#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__float__&#39;, &#39;__floor__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__index__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__int__&#39;, &#39;__invert__&#39;, &#39;__le__&#39;, &#39;__lshift__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;, &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rfloordiv__&#39;, &#39;__rlshift__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;, &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rrshift__&#39;, &#39;__rshift__&#39;, &#39;__rsub__&#39;, &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__trunc__&#39;, &#39;__xor__&#39;, &#39;bit_length&#39;, &#39;conjugate&#39;, &#39;denominator&#39;, &#39;from_bytes&#39;, &#39;imag&#39;, &#39;numerator&#39;, &#39;real&#39;, &#39;to_bytes&#39;] . #a = 10 #b = 3 #print(a + b) #print(a - b) #print(a / b) #float #print(a // b) #int(나머지버림) #print(a * b) #print(a ** b) #제곱 #print(a % b) #나머지 #할당연산 #a = 10 #a = a + 10 #a += 10 #a #논리연산 #a = True # 1 #b = False # 0 #print(a and b) #곱 #print(a or b) #합 #print(not b) #부정 #비교연산 #a = 3 #b = 3 #print(a == b) #print(a != b) #print(a &gt; b) #print(a &gt;= b) #print(a &lt; b) #print(a &lt;= b) #문자열, str s = &#39;paullab CEO leehojun&#39; s[8] + s[9] + s[10] #여기서 8,9,10을 index, s[8]과 같은 형태를 indexing s[8:11] #slicing은 특정 구간을 잘라낼 경우 사용합니다. #자료형[start:stop:step] #s[::-1] #역순 #s[10:7:-1] #CEO 역순 . &#39;nujoheel OEC balluap&#39; . for i in range(101): if i % 3 == 0 and i % 5 == 0: print(i) . 0 15 30 45 60 75 90 . print(10 + 10) print(&#39;10&#39;+&#39;10&#39;) print(int(&#39;10&#39;) + 10) a = &#39;10&#39; b = 10 print(int(a) + b) . 20 1010 20 20 . bool(-1) . True . dir(s) . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isascii&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;] . &#39;aaabbc&#39; .count(&#39;b&#39;) . 2 . &#39;hello world&#39; .find(&#39;h&#39;) . 0 . &#39;hello world&#39; .index(&#39;w&#39;) . 6 . a = &#39;hello world&#39; a.index(&#39;w&#39;) . 6 . name = &#39;호준&#39; age = 10 &#39;제 이름은 {}입니다. 제 나이는 {}입니다.&#39;.format(name, age ) &#39;제 이름은 {1}입니다. 제 나이는 {0}입니다.&#39;.format(name, age ) #{}가 있는 곳에 순서대로 넣어줌 . &#39;제 이름은 10입니다. 제 나이는 호준입니다.&#39; . &#39;!&#39;.join([&#39;hello&#39;,&#39;world&#39;]) . &#39;hello!world&#39; . &#39;-&#39;.join([&#39;hello&#39;,&#39;world&#39;]) . &#39;hello-world&#39; . &#39;hello world&#39;.replace(&#39;world&#39;,&#39;jeju univ&#39;) . &#39;hello jeju univ&#39; . &#39;hello world !!&#39;.split(&#39; &#39;) . [&#39;hello&#39;, &#39;world&#39;, &#39;!!&#39;] . &#39; hello world &#39;.strip() . &#39;hello world&#39; . &#39;hello world&#39;.upper() . &#39;HELLO WORLD&#39; . &#39;HELLO WORLD&#39;.lower() . &#39;hello world&#39; . print(list(range(10))) print(list(range(5, 10))) print(list(range(5,1 0, 2))) print(list(range(10, 5, -1))) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [5, 6, 7, 8, 9] [5, 7, 9] [10, 9, 8, 7, 6] . &#53356;&#47204;&#47553; . import requests from bs4 import BeautifulSoup paullab_url = &#39;https://ridibooks.com/category/free-books/2200&#39; #수정 response = requests.get(paullab_url) #주소에서 텍스트로가져와 response.encoding = &#39;utf-8&#39; html = response.text soup = BeautifulSoup(html, &#39;html.parser&#39;) lecture_list = soup.select(&#39;.title_text &#39;) # chrome Ctrl+shift+i 누르고 버튼클릭해서 수정 print(dir(lecture_list)) for lecture in lecture_list: print(lecture.text.strip()) #공백없애고(strip()) 출력 #lecture_list[0].text.strip() #0번째만 출력 . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;] 정규표현식 Python으로 톺아보기 더 잘 검색되고 더 정확히 도달되는 유튜브 상위 노출의 모든 것 [스페셜리포트 2019-8] 공공부문 AI의 핵심 &#39;신뢰가능 AI&#39; C포자를 위한 본격 C 언어 프로그래밍 [무료 특별판] 보고서 작성 실무 강의 [무료특별판] 팀 개발을 위한 Git, GitHub 시작하기 Do it! HTML+CSS+자바스크립트 웹 표준의 정석 [특별부록] 눈떠보니 코딩테스트 전날 With JAVA 파닥파닥 Flutter 코어 이더리움 프로그래밍 내 손으로 만드는 인스타그램 클론 강의 1권 내 손으로 만드는 인스타그램 클론 강의 2권 블록체인X비트코인 인사이트 1 xlsxwriter 튜토리얼로 배우는 Python 엑셀 프로그래밍 [무료 특별판] 맛있는 디자인 프리미어 프로 &amp; 애프터 이펙트 CC 2021 파이썬 기초 문법 제주코딩베이스캠프 Code Festival: JS 100제 1부 제주코딩베이스캠프 Code Festival: Python 100제 1부 실전 예제로 살펴보는 PyQt Tutorial 2021 Jeju Coding Basecamp - 제주코딩베이스캠프 . 9/10 . x = 0 while x &lt; 10: print(x) x += 1 print(&#39;end while&#39;) . 0 1 2 3 4 5 6 7 8 9 end while . for i in &#39;Hello World&#39;: print(i) . H e l l o W o r l d . s = 0 for i in &#39;123123&#39;: s += int(i) print(s) . 12 . 호준 = print 호준(&#39;hello world!&#39;) . hello world! . for i in [1, 2, 3]: #list print(i) for i in (1, 2, 3): #tuple print(i) . 1 2 3 1 2 3 . for i in range(10): print(i) . 0 1 2 3 4 5 6 7 8 9 . range(10) . range(0, 10) . type(range(10)) . range . list(range(10)) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . type(list(range(10))) . list . list(range(5, 10)) list(range(1, 10, 2)) list(range(10, 1, -1)) . [10, 9, 8, 7, 6, 5, 4, 3, 2] . 합 = 0 for i in range(1, 101, 2): 합 += i 합 . 2500 . for i in range(2, 10,): for j in range(1, 10): print(f&#39;{i} X {j} = {i * j}&#39;) #format 다음 버전 . 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 2 X 7 = 14 2 X 8 = 16 2 X 9 = 18 3 X 1 = 3 3 X 2 = 6 3 X 3 = 9 3 X 4 = 12 3 X 5 = 15 3 X 6 = 18 3 X 7 = 21 3 X 8 = 24 3 X 9 = 27 4 X 1 = 4 4 X 2 = 8 4 X 3 = 12 4 X 4 = 16 4 X 5 = 20 4 X 6 = 24 4 X 7 = 28 4 X 8 = 32 4 X 9 = 36 5 X 1 = 5 5 X 2 = 10 5 X 3 = 15 5 X 4 = 20 5 X 5 = 25 5 X 6 = 30 5 X 7 = 35 5 X 8 = 40 5 X 9 = 45 6 X 1 = 6 6 X 2 = 12 6 X 3 = 18 6 X 4 = 24 6 X 5 = 30 6 X 6 = 36 6 X 7 = 42 6 X 8 = 48 6 X 9 = 54 7 X 1 = 7 7 X 2 = 14 7 X 3 = 21 7 X 4 = 28 7 X 5 = 35 7 X 6 = 42 7 X 7 = 49 7 X 8 = 56 7 X 9 = 63 8 X 1 = 8 8 X 2 = 16 8 X 3 = 24 8 X 4 = 32 8 X 5 = 40 8 X 6 = 48 8 X 7 = 56 8 X 8 = 64 8 X 9 = 72 9 X 1 = 9 9 X 2 = 18 9 X 3 = 27 9 X 4 = 36 9 X 5 = 45 9 X 6 = 54 9 X 7 = 63 9 X 8 = 72 9 X 9 = 81 . i = 2 j = 1 while i &lt; 10: while j &lt; 10: print(f&#39;{i} X {j} = {i * j}&#39;) j += 1 i += 1 . 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 2 X 7 = 14 2 X 8 = 16 2 X 9 = 18 . i = 2 j = 1 while i &lt; 10: while j &lt; 10: print(f&#39;{i} X {j} = {i * j}&#39;) j += 1 j = 1 i += 1 . 2 X 1 = 2 2 X 2 = 4 2 X 3 = 6 2 X 4 = 8 2 X 5 = 10 2 X 6 = 12 2 X 7 = 14 2 X 8 = 16 2 X 9 = 18 3 X 1 = 3 3 X 2 = 6 3 X 3 = 9 3 X 4 = 12 3 X 5 = 15 3 X 6 = 18 3 X 7 = 21 3 X 8 = 24 3 X 9 = 27 4 X 1 = 4 4 X 2 = 8 4 X 3 = 12 4 X 4 = 16 4 X 5 = 20 4 X 6 = 24 4 X 7 = 28 4 X 8 = 32 4 X 9 = 36 5 X 1 = 5 5 X 2 = 10 5 X 3 = 15 5 X 4 = 20 5 X 5 = 25 5 X 6 = 30 5 X 7 = 35 5 X 8 = 40 5 X 9 = 45 6 X 1 = 6 6 X 2 = 12 6 X 3 = 18 6 X 4 = 24 6 X 5 = 30 6 X 6 = 36 6 X 7 = 42 6 X 8 = 48 6 X 9 = 54 7 X 1 = 7 7 X 2 = 14 7 X 3 = 21 7 X 4 = 28 7 X 5 = 35 7 X 6 = 42 7 X 7 = 49 7 X 8 = 56 7 X 9 = 63 8 X 1 = 8 8 X 2 = 16 8 X 3 = 24 8 X 4 = 32 8 X 5 = 40 8 X 6 = 48 8 X 7 = 56 8 X 8 = 64 8 X 9 = 72 9 X 1 = 9 9 X 2 = 18 9 X 3 = 27 9 X 4 = 36 9 X 5 = 45 9 X 6 = 54 9 X 7 = 63 9 X 8 = 72 9 X 9 = 81 . import random 정답 = random.randint(1, 100) 정답 while True: 입력 = int(input(&#39;숫자를 입력하세요:&#39;)) if 입력 &gt; 정답: print(&#39;Down!&#39;) elif 입력 &lt; 정답: print(&#39;Up!&#39;) else: print(&#39;정답입니다!&#39;) break . 숫자를 입력하세요:23 Down! 숫자를 입력하세요:11 Up! 숫자를 입력하세요:20 Down! 숫자를 입력하세요:18 Down! 숫자를 입력하세요:15 정답입니다! . if True: print(&#39;hello&#39;) if False: print(&#39;world&#39;) . hello . 합 = 0 for i in range(101): if i % 2 == 0: 합 += i 합 . 2550 . score = 89 money = 0 if score &gt; 90: print(&#39;mom : im so happy&#39;) money += 1000000 if score &gt; 80: print(&#39;mom : im so happy&#39;) money += 100000 if score &gt; 70: print(&#39;mom : im so happy&#39;) money += 10000 if score &gt; 60: print(&#39;mom : im so happy&#39;) money += 1000 . score = 92 money = 0 if score &gt; 90: print(&#39;mom : i &#39;m so happy&#39;) money += 1000000 elif score &gt; 80: print(&#39;mom : i &#39;m happy&#39;) money += 100000 elif score &gt; 70: print(&#39;mom : happy&#39;) money += 10000 else: print(&#39;mom : happy?&#39;) money += 1000 . mom : i&#39;m so happy . list, tuple, dict, set . #1.변경이 가능하고 #2.순서가 있는 자료형 l = [10, 20, 30, 40, 50] l[0] = 100000 l . [100000, 20, 30, 40, 50] . dir(l) . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;] . l.append(100) l . [100000, 20, 30, 40, 50, 100, 100, 100, 100] . l.count(100) #100의 개수 출력 . 4 . l.index(20) . 1 . l.insert(2, 100000) l . [100000, 20, 100000, 100000, 30, 40, 50, 100, 100, 100, 100] . l.pop() l . [100000, 20, 100000, 100000, 30, 40, 50] . l.remove(100000) l . [20, 100000, 100000, 30, 40, 50] . l.sort() l . [20, 30, 40, 50, 100000, 100000] . l.reverse() l . [100000, 100000, 50, 40, 30, 20] . #1.변경이 불가능하고 #2.순서가 있는 자료형 t = (10, 20, 30) dir(t) . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;count&#39;, &#39;index&#39;] . #1.key와 value의 쌍으로 되어있고 #2. 순서가 없음(순서는 보장하나 index로 호출 불가) . d = {&#39;하나&#39;:&#39;one&#39;,&#39;둘&#39;:&#39;two&#39;} d[&#39;하나&#39;] . &#39;one&#39; . set(&#39;123123123123123444&#39;) . {&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;} . s = {1, 2, 3, 4} ss = {4, 5, 6} s | ss #합집합/ 쉬프트 누르고 s &amp; ss #교집합 s - ss #차집합 . {1, 2, 3} . #class def 덧셈(x, y): return x + y 덧셈(10,20) . 30 . class Car: maxSpeed = 300 mwxPelple = 5 def start(self): print(&#39;출발했습니다&#39;) def stop(self): print(&quot;멈췄습니다&quot;) . k3 = Car() #인스턴스 k5 = Car() print(k3.maxSpeed) k3.start() . 300 출발했습니다 . import test test.name test.덧셈(10, 20) . 30 . from test import name, 덧셈 name . &#39;이호준&#39; . import numpy as np . s = [[1,2,3],[4,5,6],[7,8,9]] s[0][1] . 2 . for i in range(3): for j in range(3): s[i][j] = s[i][j] * 2 s . [[2, 4, 6], [8, 10, 12], [14, 16, 18]] . ss = np.array(s) ss * 2 . array([[ 4, 8, 12], [16, 20, 24], [28, 32, 36]]) . &#47784;&#51088;&#51060;&#53356; . from scipy import misc img = misc.face() . import matplotlib.pyplot as plt plt.imshow(img) img.shape (400, 1200, 3) . (400, 1200, 3) .",
            "url": "https://hyunjuice0221.github.io/testcolabblog/fastpages/jupyter/2021/09/12/_09_13_%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88.html",
            "relUrl": "/fastpages/jupyter/2021/09/12/_09_13_%ED%8C%8C%EC%9D%B4%EC%8D%AC%EA%B8%B0%EC%B4%88.html",
            "date": " • Sep 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hyunjuice0221.github.io/testcolabblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hyunjuice0221.github.io/testcolabblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hyunjuice0221.github.io/testcolabblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hyunjuice0221.github.io/testcolabblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}